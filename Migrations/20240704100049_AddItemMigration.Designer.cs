// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StoreManagementSystem.Data;

#nullable disable

namespace StoreManagementSystem.Migrations
{
    [DbContext(typeof(StoreManagementSystemContext))]
    [Migration("20240704100049_AddItemMigration")]
    partial class AddItemMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StoreManagementSystem.Models.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ref")
                        .HasColumnType("text");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("StoreManagementSystem.Models.ItemCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("StoreManagementSystem.Models.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4375),
                            Name = "Piece",
                            Symbol = "PCS",
                            UpdatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4376)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4378),
                            Name = "Yards",
                            Symbol = "YDS",
                            UpdatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4379)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4380),
                            Name = "Centimeter",
                            Symbol = "CM",
                            UpdatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4381)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4382),
                            Name = "Milimeter",
                            Symbol = "MM",
                            UpdatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4382)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4384),
                            Name = "Gauss",
                            Symbol = "GS",
                            UpdatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4384)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4385),
                            Name = "Cone",
                            Symbol = "Cone",
                            UpdatedOn = new DateTime(2024, 7, 4, 10, 0, 48, 161, DateTimeKind.Utc).AddTicks(4386)
                        });
                });

            modelBuilder.Entity("StoreManagementSystem.Models.Item", b =>
                {
                    b.HasOne("StoreManagementSystem.Models.ItemCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreManagementSystem.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("StoreManagementSystem.Models.ItemCategory", b =>
                {
                    b.HasOne("StoreManagementSystem.Models.ItemCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("StoreManagementSystem.Models.ItemCategory", b =>
                {
                    b.Navigation("ChildCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
